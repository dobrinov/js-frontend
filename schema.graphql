schema {
  query: Query
  mutation: Mutation
}

"""Input payload for creating user"""
input CreateUserInput {
  email: String!
  name: String!
  password: String!
  passwordConfirmation: String!
}

union CreateUserPayload = FailedMutationWithFields | SuccessfulCreateUserPayload

type FailedMutationWithFields {
  failureMessage: String
  fieldFailures: [FieldFailure]!
}

type FieldFailure {
  field: String!
  message: String!
}

type Mutation {
  activateUser(userId: ID!): activateUserPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  suspendUser(userId: ID!): suspendUserPayload
}

type PageInfo {
  endCursor: String
  hasNextPage: String!
  hasPreviousPage: String!
  startCursor: String
}

type Query {
  users(
    """Returns the items in the list that come after the specified cursor."""
    after: String
    """Returns the items in the list that come before the specified cursor."""
    before: String
    """Returns the first n items from the list."""
    first: Int
    """Returns the last n items from the list."""
    last: Int
  ): UserConnection!
  viewer: User!
}

type SuccessfulCreateUserPayload {
  user: User!
}

type User {
  email: String!
  id: String!
  lastLoggedAt: String
  name: String!
  role: UserRole!
  suspendedAt: String
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserRole {
  ADMIN
  BASIC
}

type activateUserPayload {
  user: User
}

type suspendUserPayload {
  user: User
}